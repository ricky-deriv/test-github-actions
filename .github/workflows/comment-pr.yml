name: My Workflow
on:
  pull_request:
    types: [opened, synchronize]
jobs:
  initialize:
    name: "get dirs"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo matrix="$(jq -Mc -n '{"dir":["aws","project"]}')" >>$GITHUB_OUTPUT
  terraform: 
    needs: initialize
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.initialize.outputs.matrix)}}
    outputs:
      plan-json: ${{ steps.opa-result.outputs.opa-result }}
    steps:
      - uses: actions/checkout@v3
      - name: archive terraform json plan
        uses: actions/upload-artifact@v3
        with:
          name: tf-plan
          path: aws/tfplan.json
          retention-days: 5
      - name: test-matrix
        run: |
          echo "testing matrix"
          echo "dir: ${{ matrix.dir }}"
      - name: print result into github output
        if: always()
        id: opa-result
        working-directory: ${{ matrix.dir }}
        run: |
          ls
          output="$(jq -c . tfplan.json)"
          echo "opa-result=${output}" >> "${GITHUB_OUTPUT}"
  opa-eval:
    runs-on: ubuntu-latest
    needs: [ terraform, initialize ]
    strategy:
      matrix: ${{fromJson(needs.initialize.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - name: test dir
        run: |
          echo "check dir..."
          ls -a
          echo "---"
          ls .github
          echo "---"
          ls .github/workflows
          echo "---"
          cat ./.github/workflows/opa.yml
      - name: reusable-workflow
        id: reusable
        uses: ./.github/workflows/opa.yml
        with: 
          tfplan: ${{ needs.terraform.outputs.plan-json }}
          dir: ${{ matrix.dir }}
      - name: test output
        id: test-out
        run: |
          echo "test output from prev step reusable workflow..."
          echo "outz: ${{ needs.reusable.outputs.opa-result }}"
  display-output:
    needs: [ initialize, opa-eval ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.initialize.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3  
      - name: get opa-results
        uses: actions/download-artifact@v3
        with:
          name: opa-result
      - name: print result into github output
        if: always()
        id: opa-result
        run: |
          output="$(jq -c . opa-result.json)"
          echo "result=${output}" >> "${GITHUB_OUTPUT}"
          ls
          echo "test output from opa-eval workflow..."
          echo "outt ${{ needs.opa-eval.outputs.opa-result }}"
      - uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const result = ${{ steps.opa-result.outputs.result }}
            const colors = {"warn":"!", "deny":"-"};
            const deny = result.deny.map(x => `${colors.deny} ${x}`);
            const warn = result.warn.map(x => `${colors.warn} ${x}`); 
            const outcome = deny.length > 0 ? 'Failure' : 'Success';
            let output = `### open policy agent check: \`${outcome}\`
            Directory: \`${{ matrix.dir }}\`
            <details><summary>policy check output</summary>
            
            \`\`\`diff\n
            Deny: ${deny.length}
            ${deny.join("\n")}
            
            # Warn ${warn.length}
            ${warn.join("\n")}
            \`\`\`
            </details>
            
            end`
            
            output = output.replace('"', '\"')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
